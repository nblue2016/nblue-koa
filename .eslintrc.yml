---
  env:
    es6: true
    node: true
    mocha: true

  parser: "esprima"

  parserOptions:
    ecmaVersion: 6
    sourceType: "module"
    ecmaFeatures:
      jsx: false

  rules:
    # Possible Errors
    comma-dangle: 2 # require or disallow trailing commas
    no-cond-assign: 2 # disallow assignment operators in conditional expressions
    no-console: 2 # disallow the use of console
    no-constant-condition: 2 # disallow constant expressions in conditions
    no-control-regex: 2 # disallow control characters in regular expressions
    no-debugger: 2 # disallow the use of debugger
    no-dupe-args: 2 # disallow duplicate arguments in function definitions
    no-dupe-keys: 2 # disallow duplicate keys in object literals
    no-duplicate-case: 2 # disallow duplicate case labels
    no-empty: 2 # disallow empty block statements
    no-empty-character-class: 2 # disallow empty character classes in regular expressions
    no-ex-assign: 2 # disallow reassigning exceptions in catch clauses
    no-extra-boolean-cast: 2 # disallow unnecessary boolean casts
    no-extra-parens: 2 # disallow unnecessary parentheses
    no-extra-semi: 2 # disallow unnecessary semicolons
    no-func-assign: 2 # disallow reassigning function declarations
    no-inner-declarations: 2 # disallow function or var declarations in nested blocks
    no-invalid-regexp: 2 # disallow invalid regular expression strings in RegExp constructors
    no-irregular-whitespace: 2 # disallow irregular whitespace outside of strings and comments
    no-negated-in-lhs: 2 # disallow negating the left operand in in expressions
    no-obj-calls: 2 # disallow calling global object properties as functions
    no-regex-spaces: 2 # disallow multiple spaces in regular expression literals
    no-sparse-arrays: 2 # disallow sparse arrays
    no-unexpected-multiline: 2 # disallow confusing multiline expressions
    no-unreachable: 2 # disallow unreachable code after return, throw, continue, and break statements
    no-unsafe-finally: 2 # disallow control flow statements in finally blocks
    use-isnan: 2 # require calls to isNaN() when checking for NaN
    valid-jsdoc: 2 # enforce valid JSDoc comments
    valid-typeof: 2 # enforce comparing typeof expressions against valid strings

    # Best practice
    accessor-pairs: 2 # enforce getter and setter pairs in objects
    array-callback-return: 2 # enforce return statements in callbacks of array methods
    block-scoped-var: 2 # enforce the use of variables within the scope they are defined
    complexity: 2 # eenforce a maximum cyclomatic complexity allowed in a program
    consistent-return: 2 # erequire return statements to either always or never specify values
    curly: [2,  "multi-line"] # enforce consistent brace style for all control statements
    default-case: 2 # erequire default cases in switch statements
    dot-location: 2 # eenforce consistent newlines before and after dots
    dot-notation: 2 # eenforce dot notation whenever possible
    eqeqeq: [1, "smart"]  # require the use of === and !==
    guard-for-in: 2 # erequire for-in loops to include an if statement
    no-alert: 2 # edisallow the use of alert, confirm, and prompt
    no-caller: 2 # edisallow the use of arguments.caller or arguments.callee
    no-case-declarations: 2 # edisallow lexical declarations in case clauses
    no-div-regex: 2 # edisallow division operators explicitly at the beginning of regular expressions
    no-else-return: 2 # edisallow else blocks after return statements in if statements
    no-empty-function: 2 # edisallow empty functions
    no-empty-pattern: 2 # edisallow empty destructuring patterns
    no-eq-null: 2 # edisallow null comparisons without type-checking operators
    no-eval: [2, { allowIndirect: true }] # edisallow the use of eval()
    no-extend-native: 2 # edisallow extending native types
    no-extra-bind: 2 # edisallow unnecessary calls to .bind()
    no-extra-label: 2 # edisallow unnecessary labels
    no-fallthrough: 2 # edisallow fallthrough of case statements
    no-floating-decimal: 2 # edisallow leading or trailing decimal points in numeric literals
    no-implicit-coercion: 2 # edisallow shorthand type conversions
    no-implicit-globals: 2 # edisallow var and named function declarations in the global scope
    no-implied-eval: 2 # edisallow the use of eval()-like methods
    no-invalid-this: 0 # edisallow this keywords outside of classes or class-like objects
    no-iterator: 2 # edisallow the use of the __iterator__ property
    no-labels: 2 # edisallow labeled statements
    no-lone-blocks: 2 # edisallow unnecessary nested blocks
    no-loop-func: 2 # edisallow function declarations and expressions inside loop statements
    no-magic-numbers: [2, { ignore: [-1, 0, 1, 2], ignoreArrayIndexes: true }] # edisallow magic numbers
    no-multi-spaces: 2 # edisallow multiple spaces
    no-multi-str: 2 # edisallow multiline strings
    no-native-reassign: 2 # edisallow reassigning native objects
    no-new: 2 # edisallow new operators outside of assignments or comparisons
    no-new-func: 2 # edisallow new operators with the Function object
    no-new-wrappers: 2 # edisallow new operators with the String, Number, and Boolean objects
    no-octal: 2 # edisallow octal literals
    no-octal-escape: 2 # edisallow octal escape sequences in string literals
    no-param-reassign: 2 # edisallow reassigning function parameters
    no-proto: 2 # edisallow the use of the __proto__ property
    no-redeclare: 2 # edisallow var redeclaration
    no-return-assign: 2 # edisallow assignment operators in return statements
    no-script-url: 2 # edisallow javascript: urls
    no-self-assign: 2 # edisallow assignments where both sides are exactly the same
    no-self-compare: 2 # edisallow comparisons where both sides are exactly the same
    no-sequences: 2 # edisallow comma operators
    no-throw-literal: 2 # edisallow throwing literals as exceptions
    no-unmodified-loop-condition: 2 # edisallow unmodified loop conditions
    no-unused-expressions: 2 # edisallow unused expressions
    no-unused-labels: 2 # edisallow unused labels
    no-useless-call: 2 # edisallow unnecessary calls to .call() and .apply()
    no-useless-concat: 2 # edisallow unnecessary concatenation of literals or template literals
    no-useless-escape: 2 # edisallow unnecessary escape characters
    no-void: 2 # edisallow void operators
    no-warning-comments: 2 # edisallow specified warning terms in comments
    no-with: 2 # edisallow with statements
    radix: 2 # eenforce the consistent use of the radix argument when using parseInt()
    vars-on-top: 2 # erequire var declarations be placed at the top of their containing scope
    wrap-iife: 2 # erequire parentheses around immediate function invocations
    yoda: [2, "never"]  # require or disallow “Yoda” conditions```

    # Strict Mode
    strict: [1, "safe"]

    # Variables
    init-declarations: 2 # require or disallow initialization in var declarations
    no-catch-shadow: 2 # disallow catch clause parameters from shadowing variables in the outer scope
    no-delete-var: 2 # disallow deleting variables
    no-label-var: 2 # disallow labels that share a name with a variable
    no-restricted-globals: 2 # disallow specified global variables
    no-shadow: 2 # disallow var declarations from shadowing variables in the outer scope
    no-shadow-restricted-names: 2 # disallow identifiers from shadowing restricted names
    no-undef: 2 # disallow the use of undeclared variables unless mentioned in /*global */ comments
    no-undef-init: 2 # disallow initializing variables to undefined
    no-undefined: 2 # disallow the use of undefined as an identifier
    no-unused-vars: [2, { args: "after-used" }] # disallow unused variables
    no-use-before-define: 2 # disallow the use of variables before they are defined

    # Node.js and CommonJS
    callback-return: 2 # require return statements after callbacks
    global-require: 0 # require require() calls to be placed at top-level module scope
    handle-callback-err: 2 # require error handling in callbacks
    no-mixed-requires: 2 # disallow require calls to be mixed with regular var declarations
    no-new-require: 2 # disallow new operators with calls to require
    no-path-concat: 2 # disallow string concatenation with __dirname and __filename
    no-process-env: 2 # disallow the use of process.env
    no-process-exit: 2 # disallow the use of process.exit()
    no-restricted-modules: 2 # disallow specified modules when loaded by require
    no-sync: 2 # disallow synchronous methods

    # Stylistic Issues
    array-bracket-spacing: 1 # enforce consistent spacing inside array brackets
    block-spacing: 1 # enforce consistent spacing inside single-line blocks
    brace-style: 1 # enforce consistent brace style for blocks
    camelcase: [1, { properties: "never" }]  # enforce camelcase naming convention
    comma-spacing: 1 # enforce consistent spacing before and after commas
    comma-style: 1 # enforce consistent comma style
    computed-property-spacing: 1 # enforce consistent spacing inside computed property brackets
    consistent-this: [0, "that", "ctx"]  # enforce consistent naming when capturing the current execution context
    eol-last: 1 # enforce at least one newline at the end of files
    func-names: 0 # enforce named function expressions
    func-style: 1 # enforce the consistent use of either function declarations or expressions
    id-blacklist: 1 # disallow specified identifiers
    id-length: 1 # enforce minimum and maximum identifier lengths
    id-match: 1 # require identifiers to match a specified regular expression
    indent: [1, 2]  # enforce consistent indentation
    jsx-quotes: 1 # enforce the consistent use of either double or single quotes in JSX attributes
    key-spacing: 1 # enforce consistent spacing between keys and values in object literal properties
    keyword-spacing: 1 # enforce consistent spacing before and after keywords
    linebreak-style: 1 # enforce consistent linebreak style
    lines-around-comment: 1 # require empty lines around comments
    max-depth: 1 # enforce a maximum depth that blocks can be nested
    max-len: 1 # enforce a maximum line length
    max-nested-callbacks: 1 # enforce a maximum depth that callbacks can be nested
    max-params: [1, 6]  # enforce a maximum number of parameters in function definitions
    max-statements: [1, { max: 30 }]  # enforce a maximum number of statements allowed in function blocks
    max-statements-per-line: 1 # enforce a maximum number of statements allowed per line
    new-cap: [1, {capIsNew: false}]  # require constructor function names to begin with a capital letter
    new-parens: 1 # require parentheses when invoking a constructor with no arguments
    newline-after-var: 1 # require or disallow an empty line after var declarations
    newline-before-return: 1 # require an empty line before return statements
    newline-per-chained-call: 1 # require a newline after each call in a method chain
    no-array-constructor: 1 # disallow Array constructors
    no-bitwise: 1 # disallow bitwise operators
    no-continue: 0 # disallow continue statements
    no-inline-comments: 1 # disallow inline comments after code
    no-lonely-if: 1 # disallow if statements as the only statement in else blocks
    no-mixed-spaces-and-tabs: 1 # disallow mixed spaces and tabs for indentation
    no-multiple-empty-lines: 1 # disallow multiple empty lines
    no-negated-condition: 1 # disallow negated conditions
    no-nested-ternary: 1 # disallow nested ternary expressions
    no-new-object: 1 # disallow Object constructors
    no-plusplus: 1 # disallow the unary operators ++ and --
    no-restricted-syntax: 1 # disallow specified syntax
    no-spaced-func: 1 # disallow spacing between function identifiers and their applications
    no-ternary: 0 # disallow ternary operators
    no-trailing-spaces: 1 # disallow trailing whitespace at the end of lines
    no-underscore-dangle: [1, { allow: [], allowAfterThis: true }]  # disallow dangling underscores in identifiers
    no-unneeded-ternary: 1 # disallow ternary operators when simpler alternatives exist
    no-whitespace-before-property: 1 # disallow whitespace before properties
    object-curly-spacing: [1, "always"] # enforce consistent spacing inside braces
    object-property-newline: 1 # enforce placing object properties on separate lines
    one-var: [1, { var: "always", let: "always", const: "never" }]  # enforce variables to be declared either together or separately in functions
    one-var-declaration-per-line: 1 # require or disallow newlines around var declarations
    operator-assignment: 1 # require or disallow assignment operator shorthand where possible
    operator-linebreak: 1 # enforce consistent linebreak style for operators
    padded-blocks: [1, { blocks: "never", switches: "never", classes: "always" }]  # require or disallow padding within blocks
    quote-props: [1, "as-needed"]  # require quotes around object literal property names
    quotes: [2, "single", { avoidEscape: true, allowTemplateLiterals: true }]  # enforce the consistent use of either backticks, double, or single quotes
    require-jsdoc: 1 # require JSDoc comments
    semi: [1, "never"]  # require or disallow semicolons instead of ASI
    semi-spacing: 1 # enforce consistent spacing before and after semicolons
    sort-vars: 1 # require variables within the same declaration block to be sorted
    space-before-blocks: [1, "always"]  # enforce consistent spacing before blocks
    space-before-function-paren: [1, "always"]  # enforce consistent spacing before function definition opening parenthesis
    space-in-parens: 1 # enforce consistent spacing inside parentheses
    space-infix-ops: 1 # require spacing around operators
    space-unary-ops: 1 # enforce consistent spacing before or after unary operators
    spaced-comment: [1, "always"] # enforce consistent spacing after the // or /* in a comment
    wrap-regex: 1 # require parenthesis around regex literals

    # ECMAScript 6
    arrow-body-style: [1, "as-needed"] # require braces around arrow function bodies
    arrow-parens: 1 # require parentheses around arrow function arguments
    arrow-spacing: 1 # enforce consistent spacing before and after the arrow in arrow functions
    constructor-super: 1 # require super() calls in constructors
    generator-star-spacing: 1 # enforce consistent spacing around * operators in generator functions
    no-class-assign: 1 # disallow reassigning class members
    no-confusing-arrow: [2, { allowParens: true }] # disallow arrow functions where they could be confused with comparisons
    no-const-assign: 1 # disallow reassigning const variables
    no-dupe-class-members: 1 # disallow duplicate class members
    no-duplicate-imports: 1 # disallow duplicate module imports
    no-new-symbol: 1 # disallow new operators with the Symbol object
    no-restricted-imports: 1 # disallow specified modules when loaded by import
    no-this-before-super: 1 # disallow this/super before calling super() in constructors
    no-useless-computed-key: 1 # disallow unnecessary computed property keys in object literals
    no-useless-constructor: 1 # disallow unnecessary constructors
    no-var: 1 # require let or const instead of var
    object-shorthand: 1 # require or disallow method and property shorthand syntax for object literals
    prefer-arrow-callback: 1 # require arrow functions as callbacks
    prefer-const: 1 # require const declarations for variables that are never reassigned after declared
    prefer-reflect: 1 # require Reflect methods where applicable
    prefer-rest-params: 1 # require rest parameters instead of arguments
    prefer-spread: 1 # require spread operators instead of .apply()
    prefer-template: 1 # require template literals instead of string concatenation
    require-yield: 1 # require generator functions to contain yield
    sort-imports: 0 # enforce sorted import declarations within modules
    template-curly-spacing: 1 # require or disallow spacing around embedded expressions of template strings
    yield-star-spacing: 1 # require or disallow spacing around the * in yield* expressions
